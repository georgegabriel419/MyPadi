import { APIResource } from "../resource.js";
import * as Core from "../core.js";
import { type Response } from "../_shims/index.js";
export declare class Speech extends APIResource {
    /**
     * Synthesize
     */
    generate(params: SpeechGenerateParams, options?: Core.RequestOptions): Core.APIPromise<Response>;
    /**
     * Transcribe
     */
    transcribe(body: SpeechTranscribeParams, options?: Core.RequestOptions): Core.APIPromise<SpeechTranscribeResponse>;
}
export interface SpeechTranscribeResponse {
    request_id: string;
    segments?: Array<SpeechTranscribeResponse.Segment | null>;
    text?: string | null;
}
export declare namespace SpeechTranscribeResponse {
    interface Segment {
        end?: number;
        speaker?: number | null;
        start?: number;
        text?: number;
    }
}
export interface SpeechGenerateParams {
    /**
     * Body param:
     */
    language: 'yo' | 'en' | 'ha' | 'ig' | 'am';
    /**
     * Body param:
     */
    text: string;
    /**
     * Body param:
     */
    voice: 'sade' | 'segun' | 'femi' | 'funmi' | 'amina' | 'aliyu' | 'hasan' | 'zainab' | 'ngozi' | 'amara' | 'ebuka' | 'obinna' | 'lucy' | 'lina' | 'john' | 'jude' | 'henry' | 'kani' | 'hana' | 'selam' | 'tena' | 'tesfaye';
    /**
     * Query param:
     */
    stream?: boolean;
}
export interface SpeechTranscribeParams {
    language: 'yo' | 'en' | 'ha' | 'ig' | 'am';
    content?: Core.Uploadable | null;
    multispeaker?: boolean | null;
    timestamp?: boolean | null;
    url?: string | null;
}
export declare namespace Speech {
    export { type SpeechTranscribeResponse as SpeechTranscribeResponse, type SpeechGenerateParams as SpeechGenerateParams, type SpeechTranscribeParams as SpeechTranscribeParams, };
}
//# sourceMappingURL=speech.d.ts.map