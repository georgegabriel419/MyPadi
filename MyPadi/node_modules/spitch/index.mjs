// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _Spitch_instances, _a, _Spitch_baseURLOverridden;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { Speech, } from "./resources/speech.mjs";
import { Text, } from "./resources/text.mjs";
/**
 * API Client for interfacing with the Spitch API.
 */
export class Spitch extends Core.APIClient {
    /**
     * API Client for interfacing with the Spitch API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['SPITCH_API_KEY'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['SPITCH_BASE_URL'] ?? https://api.spi-tch.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('SPITCH_BASE_URL'), apiKey = Core.readEnv('SPITCH_API_KEY'), ...opts } = {}) {
        if (apiKey === undefined) {
            throw new Errors.SpitchError("The SPITCH_API_KEY environment variable is missing or empty; either provide it, or instantiate the Spitch client with an apiKey option, like new Spitch({ apiKey: 'My API Key' }).");
        }
        const options = {
            apiKey,
            ...opts,
            baseURL: baseURL || `https://api.spi-tch.com`,
        };
        super({
            baseURL: options.baseURL,
            baseURLOverridden: baseURL ? baseURL !== 'https://api.spi-tch.com' : false,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        _Spitch_instances.add(this);
        this.speech = new API.Speech(this);
        this.text = new API.Text(this);
        this._options = options;
        this.apiKey = apiKey;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
    }
}
_a = Spitch, _Spitch_instances = new WeakSet(), _Spitch_baseURLOverridden = function _Spitch_baseURLOverridden() {
    return this.baseURL !== 'https://api.spi-tch.com';
};
Spitch.Spitch = _a;
Spitch.DEFAULT_TIMEOUT = 60000; // 1 minute
Spitch.SpitchError = Errors.SpitchError;
Spitch.APIError = Errors.APIError;
Spitch.APIConnectionError = Errors.APIConnectionError;
Spitch.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Spitch.APIUserAbortError = Errors.APIUserAbortError;
Spitch.NotFoundError = Errors.NotFoundError;
Spitch.ConflictError = Errors.ConflictError;
Spitch.RateLimitError = Errors.RateLimitError;
Spitch.BadRequestError = Errors.BadRequestError;
Spitch.AuthenticationError = Errors.AuthenticationError;
Spitch.InternalServerError = Errors.InternalServerError;
Spitch.PermissionDeniedError = Errors.PermissionDeniedError;
Spitch.UnprocessableEntityError = Errors.UnprocessableEntityError;
Spitch.toFile = Uploads.toFile;
Spitch.fileFromPath = Uploads.fileFromPath;
Spitch.Speech = Speech;
Spitch.Text = Text;
export { toFile, fileFromPath } from "./uploads.mjs";
export { SpitchError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export default Spitch;
//# sourceMappingURL=index.mjs.map